---
format_version: "17"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: other

trigger_map:
- push_branch: master
  pipeline: ci
- pull_request_source_branch: "*"
  pipeline: ci

pipelines:
  ci:
    stages:
    - run_tests: { }

stages:
  run_tests:
    workflows:
    - lint: { }
    - unit_test: { }
    - integration_test: { }
    - test_binary_build: { }

app:
  envs:
  - SRC_DIR_IN_GOPATH: $GOPATH/src/github.com/bitrise-io/bitrise

workflows:
  lint:
    steps:
    - script@1:
        title: Setup YAML lint
        inputs:
        - script_file_path:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -ex
            apt-get update
            apt-get --assume-yes install python3.8-venv
    - change-workdir:
        inputs:
        - path: ${SRC_DIR_IN_GOPATH}
    - git-clone:
        inputs:
        - fetch_tags: "yes"
    - git::https://github.com/bitrise-steplib/steps-check.git:
        inputs:
        - workflow: lint
        - skip_step_yml_validation: "yes"
    - deploy-to-bitrise-io: { }

  unit_test:
    steps:
    - change-workdir:
        inputs:
        - path: ${SRC_DIR_IN_GOPATH}
    - git-clone:
        inputs:
        - fetch_tags: "yes"
    - go-list: { }
    - script:
        title: Go test
        inputs:
        - content: go test -p 1 $BITRISE_GO_PACKAGES
    - deploy-to-bitrise-io: { }

  integration_test:
    title: Runs integration tests
    steps:
    - change-workdir:
        inputs:
        - path: ${SRC_DIR_IN_GOPATH}
    - git-clone:
        inputs:
        - fetch_tags: "yes"
    - script:
        title: Run integration tests
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            current_bitrise="$(pwd)/_tmp/test_bitrise"
            export CGO_ENABLED=0
            go build -o "$current_bitrise"

            export PR="" PULL_REQUEST_ID=""
            export INTEGRATION_TEST_BINARY_PATH="$current_bitrise"

            $current_bitrise setup

            go test -v ./_tests/integration/ --tags linux_and_mac

            if [ "$(uname)" == "Linux" ]; then
                go test -v ./_tests/integration/ --tags linux_only
            fi
    - deploy-to-bitrise-io: { }

  test_binary_build:
    description: Tests the release build process by creating a snapshot release (without publishing)
    steps:
    - script@1:
        title: Set up Goreleaser
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            wget -O /tmp/goreleaser.deb https://github.com/goreleaser/goreleaser/releases/download/v1.19.2/goreleaser_1.19.2_amd64.deb
            sudo dpkg -i /tmp/goreleaser.deb
    - change-workdir:
        inputs:
        - path: ${SRC_DIR_IN_GOPATH}
    - git-clone:
        inputs:
        - fetch_tags: "yes"
    - script:
        title: Goreleaser (create snapshot binaries)
        deps:
          brew:
          - name: goreleaser
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex

            goreleaser release --snapshot --rm-dist
    - deploy-to-bitrise-io: { }

meta:
  bitrise.io:
    machine_type_id: elite-xl
    stack: linux-docker-android-20.04
