---
format_version: "17"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: other

trigger_map:
- push_branch: master
  pipeline: ci
- pull_request_source_branch: "*"
  pipeline: ci
- tag: "*.*.*"
  workflow: release
  enabled: false

pipelines:
  ci:
    stages:
    - run_tests: { }

stages:
  run_tests:
    workflows:
    - run_lint: { }
    - run_unit_tests_macos: { }
    - run_unit_tests_linux: { }
    - run_integration_tests_macos: { }
    - run_integration_tests_linux: { }
    - test_binary_build_macos: { }
    - test_binary_build_linux: { }

workflows:
  run_lint:
    steps:
    - bundle::run_lint: { }

  run_unit_tests_macos:
    steps:
    - bundle::run_unit_tests: { }
    meta:
      bitrise.io:
        stack: osx-xcode-16.0.x
        machine_type_id: g2.mac.large

  run_unit_tests_linux:
    steps:
    - bundle::run_unit_tests: { }
    meta:
      bitrise.io:
        machine_type_id: elite-xl
        stack: linux-docker-android-22.04

  run_integration_tests_macos:
    steps:
    - bundle::run_integration_tests: { }
    meta:
      bitrise.io:
        stack: osx-xcode-16.0.x
        machine_type_id: g2.mac.large

  run_integration_tests_linux:
    steps:
    - bundle::run_integration_tests:
        envs:
        - SRC_DIR_IN_GOPATH: $BITRISE_SOURCE_DIR
    meta:
      bitrise.io:
        machine_type_id: elite-xl
        stack: linux-docker-android-20.04  # TODO: Docker tests are failing on Ubuntu 22.04

  test_binary_build_macos:
    steps:
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -ex

            go install github.com/goreleaser/goreleaser@latest
    - bundle::test_binary_build: { }
    meta:
      bitrise.io:
        stack: osx-xcode-16.0.x
        machine_type_id: g2.mac.large

  test_binary_build_linux:
    steps:
    - script@1:  # TODO: Unify with goreleaser setup with macOS
        title: Set up Goreleaser
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            wget -O /tmp/goreleaser.deb https://github.com/goreleaser/goreleaser/releases/download/v1.19.2/goreleaser_1.19.2_amd64.deb
            sudo dpkg -i /tmp/goreleaser.deb
    - bundle::test_binary_build: { }
    meta:
      bitrise.io:
        machine_type_id: elite-xl
        stack: linux-docker-android-22.04

  release:
    steps:
    - trigger-bitrise-workflow@0:
        inputs:
        - api_token: $CONTROL_CENTER_TRIGGER_KEY
        - workflow_id: binary-tool-release
        - exported_environment_variable_names: GIT_REPOSITORY_URL
        - app_slug: $CONTROL_CENTER_APP_SLUG
    meta:
      bitrise.io:
        machine_type_id: elite-xl
        stack: linux-docker-android-22.04

step_bundles:
  run_lint:
    steps:
    - git-clone@8:
        inputs:
        - fetch_tags: "yes"
    - git::https://github.com/bitrise-steplib/steps-check.git:
        inputs:
        - workflow: lint
        - skip_step_yml_validation: "yes"
    - deploy-to-bitrise-io@2: { }

  run_unit_tests:
    steps:
    - script@1:
        title: Setup JUnit XML converter
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            go install github.com/jstemmer/go-junit-report/v2@latest

            if [ "$(uname)" == "Linux" ]; then
              asdf reshim golang
            fi
    - git-clone@8:
        inputs:
        - fetch_tags: "yes"
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            # Here we save the original test results and deploy directories and later on we recreate them,
            #  because during the tests these directories are removed.
            ORIG_BITRISE_TEST_RESULT_DIR="${BITRISE_TEST_RESULT_DIR}"
            ORIG_BITRISE_DEPLOY_DIR="${BITRISE_DEPLOY_DIR}"

            # Setup per OS test name and log file name
            if [ "$(uname)" = "Linux" ]; then
              test_name_json='{"test-name":"Unit tests (Linux)"}'
              test_log_file_name="unit_tests_linux"
            else
              test_name_json='{"test-name":"Unit tests (macOS)"}'
              test_log_file_name="unit_tests_macos"
            fi

            # Run tests and generate report
            go test -v -p 1 ./... 2>&1 | tee "./${test_log_file_name}.log"
            mkdir -p "${ORIG_BITRISE_DEPLOY_DIR}"
            cp "./${test_log_file_name}.log" "${ORIG_BITRISE_DEPLOY_DIR}/${test_log_file_name}.log"
            go-junit-report -in "./${test_log_file_name}.log" -out "${ORIG_BITRISE_DEPLOY_DIR}/${test_log_file_name}.xml"

            # Export the junit test results
            test_results_dir="${ORIG_BITRISE_TEST_RESULT_DIR}/unit_test_results"
            mkdir -p "${test_results_dir}"
            cp "${ORIG_BITRISE_DEPLOY_DIR}/${test_log_file_name}.xml" "${test_results_dir}/${test_log_file_name}.xml"
            echo "${test_name_json}" > "${test_results_dir}/test-info.json"
    - deploy-to-bitrise-io@2: { }

  run_integration_tests:
    steps:
    - script@1:
        title: Setup JUnit XML converter
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            go install github.com/jstemmer/go-junit-report/v2@latest
    - git-clone@8:
        inputs:
        - fetch_tags: "yes"
    - script@1:
        title: Run integration tests
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -exo pipefail

            # Here we save the original test results and deploy directories and later on we recreate them,
            #  because during the tests these directories are removed.
            ORIG_BITRISE_TEST_RESULT_DIR="${BITRISE_TEST_RESULT_DIR}"
            ORIG_BITRISE_DEPLOY_DIR="${BITRISE_DEPLOY_DIR}"

            # Build and setup the current binary
            current_bitrise="$(pwd)/_tmp/test_bitrise"
            export CGO_ENABLED=0
            go build -o "$current_bitrise"

            export PR="" PULL_REQUEST_ID=""
            export INTEGRATION_TEST_BINARY_PATH="$current_bitrise"
            $current_bitrise setup

            # Setup per OS test name and log file name
            if [ "$(uname)" = "Linux" ]; then
              test_name_json='{"test-name":"Integration tests (Linux)"}'
              test_log_file_name="integration_tests_linux"
              linux_only_test_name_json='{"test-name":"Linux only integration tests"}'
              linux_only_test_log_file_name="linux_only_integration_tests"
            else
              test_name_json='{"test-name":"Integration tests (macOS)"}'
              test_log_file_name="integration_tests_macos"
            fi

            # Run tests and generate report
            go test -v --tags linux_and_mac ./_tests/integration/... 2>&1 | tee "./${test_log_file_name}.log"
            if [ "$(uname)" = "Linux" ]; then
              go test -v --tags linux_only ./_tests/integration/... 2>&1 | tee "./${linux_only_test_log_file_name}.log"
            fi

            mkdir -p "${ORIG_BITRISE_DEPLOY_DIR}"
            cp "./${test_log_file_name}.log" "${ORIG_BITRISE_DEPLOY_DIR}/${test_log_file_name}.log"
            if [ "$(uname)" = "Linux" ]; then
              cp "./${linux_only_test_log_file_name}.log" "${ORIG_BITRISE_DEPLOY_DIR}/${linux_only_test_log_file_name}.log"
            fi

            go-junit-report -in "./${test_log_file_name}.log" -out "${ORIG_BITRISE_DEPLOY_DIR}/${test_log_file_name}.xml"
            if [ "$(uname)" = "Linux" ]; then
                go-junit-report -in "./${linux_only_test_log_file_name}.log" -out "${ORIG_BITRISE_DEPLOY_DIR}/${linux_only_test_log_file_name}.xml"
            fi

            # Export the junit test results
            test_results_dir="${ORIG_BITRISE_TEST_RESULT_DIR}/integration_test_results"
            mkdir -p "${test_results_dir}"
            cp "${ORIG_BITRISE_DEPLOY_DIR}/${test_log_file_name}.xml" "${test_results_dir}/${test_log_file_name}.xml"
            echo "${test_name_json}" > "${test_results_dir}/test-info.json"

            if [ "$(uname)" == "Linux" ]; then
              test_results_dir="${ORIG_BITRISE_TEST_RESULT_DIR}/linux_only_integration_test_results"
              mkdir -p "${test_results_dir}"
              cp "${ORIG_BITRISE_DEPLOY_DIR}/${linux_only_test_log_file_name}.xml" "${test_results_dir}/${linux_only_test_log_file_name}.xml"
              echo "${linux_only_test_name_json}" > "${test_results_dir}/test-info.json"
            fi
    - deploy-to-bitrise-io@2: { }

  test_binary_build:
    steps:
    - git-clone@8:
        inputs:
        - fetch_tags: "yes"
    - script@1:
        title: Goreleaser (create snapshot binaries)
        deps:
          brew:
          - name: goreleaser
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex

            goreleaser release --snapshot --rm-dist
    - deploy-to-bitrise-io@2: { }

meta:
  bitrise.io:
    machine_type_id: elite-xl
    stack: linux-docker-android-22.04
