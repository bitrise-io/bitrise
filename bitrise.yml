---
format_version: "17"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: other

app:
  status_report_name: Run <target_id> pipeline

pipelines:
  ci:
    triggers:
      push:
      - branch: master
      pull_request:
      - source_branch: "*"
    stages:
    - run_tests: { }

stages:
  run_tests:
    workflows:
    - run_lint: { }
    - run_unit_tests_macos: { }
    - run_unit_tests_linux: { }
    - run_integration_tests_macos: { }
    - run_integration_tests_linux: { }
    - run_docker_integration_tests_linux: { }
    - test_binary_build_macos: { }
    - test_binary_build_linux: { }

workflows:
  release:
    triggers:
      tag:
      - name: "*.*.*"
    steps:
    - trigger-bitrise-workflow@0:
        inputs:
        - api_token: $CONTROL_CENTER_TRIGGER_KEY
        - workflow_id: binary-tool-release
        - exported_environment_variable_names: GIT_REPOSITORY_URL
        - app_slug: $CONTROL_CENTER_APP_SLUG

  run_lint:
    steps:
    - bundle::setup_repo: { }
    - bundle::run_lint: { }

  run_unit_tests_macos:
    steps:
    - bundle::setup_repo: { }
    - bundle::setup_go_junit_report: { }
    - bundle::run_unit_tests: { }
    meta:
      bitrise.io:
        stack: osx-xcode-16.4.x
        machine_type_id: g2.mac.large

  run_unit_tests_linux:
    steps:
    - bundle::setup_repo: { }
    - bundle::setup_go_junit_report: { }
    - bundle::run_unit_tests: { }

  run_integration_tests_macos:
    steps:
    - bundle::setup_repo: { }
    - bundle::setup_go_junit_report: { }
    - bundle::run_integration_tests: { }
    meta:
      bitrise.io:
        stack: osx-xcode-16.4.x
        machine_type_id: g2.mac.large

  run_integration_tests_linux:
    steps:
    - bundle::setup_repo: { }
    - bundle::setup_go_junit_report: { }
    - bundle::run_integration_tests: { }

  run_docker_integration_tests_linux:
    steps:
    - bundle::setup_repo: { }
    - bundle::setup_go_junit_report: { }
    - bundle::run_docker_integration_tests:
        envs:
        - SRC_DIR_IN_GOPATH: $BITRISE_SOURCE_DIR
  
  # Note: this workflow is triggered externally during stack testing, do not remove or break.
  run_system_asdf_tests:
    steps:
    - bundle::setup_repo: { }
    - bundle::setup_go_junit_report: { }
    - bundle::run_system_asdf_integration_tests: { }

  test_binary_build_macos:
    steps:
    - bundle::setup_repo: { }
    - bundle::setup_goreleaser: { }
    - bundle::test_binary_build: { }
    meta:
      bitrise.io:
        stack: osx-xcode-16.4.x
        machine_type_id: g2.mac.large

  test_binary_build_linux:
    steps:
    - bundle::setup_repo: { }
    - bundle::setup_goreleaser: { }
    - bundle::test_binary_build: { }

  create-release:
    description: Creates Linux and Darwin binaries, then publishes a GitHub release
    envs:
    - GITHUB_TOKEN: $GIT_BOT_USER_ACCESS_TOKEN  # Goreleaser expects this env var
    # R2 bucket connection params
    - AWS_ENDPOINT_URL: $AWS_ENDPOINT_PROD
    - AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_PROD
    - AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_PROD
    steps:
    - script@1:
        title: Validate if Bitrise CLI version matches the git tag
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            version=$(go run main.go --version)
            if [[ "v$version" != "$BITRISE_GIT_TAG" ]]; then
              echo "Bitrise CLI version ($version) does not match the git tag ($BITRISE_GIT_TAG)"
              echo "Please update the Bitrise CLI version to match the git tag"
              exit 1
            fi
    - script@1:
        title: Fetch GCS bucket credentials
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            echo "$GCS_BITRISE_CLI_BUCKET_CREDENTIALS" > /tmp/gcs_service_account.json
            # Goreleaser expects this env var:
            envman add --key GOOGLE_APPLICATION_CREDENTIALS --value /tmp/gcs_service_account.json
    - script@1:
        title: Goreleaser (create binaries + publish to GH)
        deps:
          brew:
          - name: goreleaser
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex

            goreleaser release

  noop:
    title: Noop
    description: Empty workflow for quick testing

  fail-test:
    title: Fails
    description: Workflow will fail
    steps:
    - script:
        title: Success
        inputs:
        - content: |-
            set -ex
            exit 0
    - script:
        title: Fail wit exit code 2
        inputs:
        - content: |-
            set -ex
            exit 2
    - script:
        title: Skippable fail with exit code 2
        is_always_run: true
        is_skippable: true
        inputs:
        - content: |-
            set -ex
            exit 2
    - script:
        title: Skipping success
        is_always_run: false
        inputs:
        - content: |-
            set -ex
            exit 0

step_bundles:
  run_lint:
    title: Run linter
    steps:
    - script:
        title: golangci-lint
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s v2.3.1
            ./bin/golangci-lint run

  run_unit_tests:
    steps:
    - script@1:
        title: Setup test envs
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            envman add --key UNAME --value "$(uname)"
    - git::https://github.com/bitrise-steplib/steps-go-test.git@test-reporting:
        inputs:
        - package: ./...
        - covermode: set
        - test_options: -p 1
        - test_report_name: Unit tests on $UNAME
    - deploy-to-bitrise-io@2: { }

  run_integration_tests:
    steps:
    - script@1:
        title: Setup test envs
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            envman add --key UNAME --value "$(uname)"

            # Build and setup the current binary
            current_bitrise="$(pwd)/_tmp/test_bitrise"
            export CGO_ENABLED=0
            envman add --key CGO_ENABLED --value "0"
            go build -o "$current_bitrise"

            export PR="" PULL_REQUEST_ID=""
            envman add --key PR --value ""
            envman add --key PULL_REQUEST_ID --value ""

            export INTEGRATION_TEST_BINARY_PATH="$current_bitrise"
            envman add --key INTEGRATION_TEST_BINARY_PATH --value "$INTEGRATION_TEST_BINARY_PATH"
            $current_bitrise setup
    - git::https://github.com/bitrise-steplib/steps-go-test.git@test-reporting:
        inputs:
        - package: ./_tests/integration/...
        - test_options: --tags linux_and_mac
        - test_report_name: Integration tests on $UNAME
    - deploy-to-bitrise-io@2: { }

  run_system_asdf_integration_tests:
    steps:
      - script@1:
          title: Run integration tests against system asdf
          inputs:
            - content: |
                #!/bin/bash
                set -ex

                # Special test mode that doesn't use the test harness but uses the system-wide asdf install and config
                export TOOLPROVIDER_TEST_USE_SYSTEM_ASDF=1
                # We test the system bitrise executable, not one built from source
                export INTEGRATION_TEST_BINARY_PATH="$(which bitrise)"
                go test -v --tags linux_and_mac ./_tests/integration/toolprovider/asdf/... -timeout 360s

  run_docker_integration_tests:
    steps:
    - script@1:
        title: Setup test envs
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            # Build and setup the current binary
            current_bitrise="$(pwd)/_tmp/test_bitrise"
            export CGO_ENABLED=0
            envman add --key CGO_ENABLED --value "0"
            go build -o "$current_bitrise"

            export PR="" PULL_REQUEST_ID=""
            envman add --key PR --value ""
            envman add --key PULL_REQUEST_ID --value ""

            export INTEGRATION_TEST_BINARY_PATH="$current_bitrise"
            envman add --key INTEGRATION_TEST_BINARY_PATH --value "$INTEGRATION_TEST_BINARY_PATH"
            $current_bitrise setup
    - git::https://github.com/bitrise-steplib/steps-go-test.git@test-reporting:
        inputs:
        - package: ./_tests/integration/...
        - test_options: --tags linux_only
        - test_report_name: Linux only integration tests
    - deploy-to-bitrise-io@2: { }

  test_binary_build:
    steps:
    - script@1:
        title: Create snapshot binaries
        deps:
          brew:
          - name: goreleaser
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex

            goreleaser release --snapshot --clean
    - deploy-to-bitrise-io@2: { }

  setup_repo:
    steps:
    - git-clone@8:
        inputs:
        - fetch_tags: "yes"
    - script:
        title: Setup Go version
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            asdf plugin add golang || true # TODO: can be removed once all workflows are migrated to Ubuntu 22
            asdf install golang

  setup_go_junit_report:
    steps:
    - script@1:
        title: Setup JUnit XML converter
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            go install github.com/jstemmer/go-junit-report/v2@latest
            asdf reshim golang

  setup_goreleaser:
    steps:
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go install github.com/goreleaser/goreleaser/v2@latest
            asdf reshim golang


meta:
  bitrise.io:
    machine_type_id: g2.linux.x-large
    stack: ubuntu-noble-24.04-bitrise-2025-android
